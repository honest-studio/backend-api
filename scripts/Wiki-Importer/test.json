{
  "page_title": [
    {
      "type": "sentence",
      "index": 0,
      "text": "Huffman coding"
    }
  ],
  "main_photo": [
    {
      "type": "main_photo",
      "url": "https://everipedia-storage.s3.amazonaws.com/ProfilePicture/en/Huffman_coding__8e7cd0/Huffman_tree_2.svg__85551.svg",
      "thumb": "https://everipedia-storage.s3.amazonaws.com/ProfilePicture/en/Huffman_coding__5ecf25/Huffman_tree_2.svg__85551__thumb.jpeg",
      "caption": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman tree generated from the exact frequencies of the text \"this is an example of a huffman tree\". The frequencies and codes of each character are below. Encoding the sentence with this code requires 195 (or 147) bits, as opposed to 288 (or 180) bits if 36 characters of 8 (or 5) bits were used. (This assumes that the code tree structure is known to the decoder and thus does not need to be counted as part of the transmitted information.)"
        }
      ],
      "mime": "image/svg+xml",
      "category": "PICTURE",
      "timestamp": "2019-09-12T17:34:45.340Z",
      "media_props": {
        "type": "main_photo",
        "srcSet": "https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Huffman_tree_2.svg/330px-Huffman_tree_2.svg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Huffman_tree_2.svg/440px-Huffman_tree_2.svg.png 2x",
        "height": 402,
        "width": 625,
        "webp_original": "https://everipedia-storage.s3.amazonaws.com/ProfilePicture/en/Huffman_coding__8e7cd0/Huffman_tree_2.svg__85551_original.webp",
        "webp_medium": "https://everipedia-storage.s3.amazonaws.com/ProfilePicture/en/Huffman_coding__8e7cd0/Huffman_tree_2.svg__85551_medium.webp",
        "webp_thumb": "https://everipedia-storage.s3.amazonaws.com/ProfilePicture/en/Huffman_coding__8e7cd0/Huffman_tree_2.svg__85551_thumb.webp"
      }
    }
  ],
  "infobox_html": null,
  "page_body": [
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": ""
            }
          ],
          "tag_type": "p",
          "attrs": {
            "className": "mw-empty-elt"
          }
        },
        {
          "index": 1,
          "items": [
            {
              "type": "body-table",
              "attrs": {
                "className": "wikitable sortable",
                "style": {
                  "float": "right",
                  "clear": "right",
                  "margin": "0.5em 0 1.3em 1.4em"
                }
              },
              "caption": {
                "attrs": {},
                "sentences": []
              },
              "thead": {
                "rows": [],
                "attrs": {}
              },
              "tbody": {
                "attrs": {},
                "rows": [
                  {
                    "index": 0,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Char"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Freq"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Code\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 1,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "space"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "7"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "111\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 2,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "a"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "4"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "010\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 3,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "e"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "4"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "000\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 4,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "f"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "3"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1101\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 5,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "h"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1010\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 6,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "i"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1000\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 7,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "m"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0111\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 8,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0010\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 9,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "s"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1011\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 10,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "t"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0110\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 11,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "l"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "11001\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 12,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "o"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "00110\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 13,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "p"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "10011\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 14,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "r"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "11000\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 15,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "u"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "00111\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 16,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "x"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {},
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "10010\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "tfoot": {
                "rows": [],
                "attrs": {}
              }
            }
          ],
          "tag_type": "table",
          "attrs": {
            "className": "wikitable sortable",
            "style": {
              "float": "right",
              "clear": "right",
              "margin": "0.5em 0 1.3em 1.4em"
            }
          }
        },
        {
          "index": 2,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "In [[LINK|lang_en|Computer_science|computer science]] and [[LINK|lang_en|Information_theory|information theory]], a **Huffman code** is a particular type of optimal [[LINK|lang_en|Prefix_code|prefix code]] that is commonly used for [[LINK|lang_en|Lossless_data_compression|lossless data compression]]. The process of finding or using such a code proceeds by means of **Huffman coding**, an algorithm developed by [[LINK|lang_en|David_A._Huffman|David A. Huffman]] while he was a [[LINK|lang_en|Doctor_of_Science|Sc.D.]] student at [[LINK|lang_en|Massachusetts_Institute_of_Technology|MIT]], and published in the 1952 paper \"A Method for the Construction of Minimum-Redundancy Codes\".[[CITE|1|/wiki/David_A._Huffman]]"
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 3,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The output from Huffman's algorithm can be viewed as a [[LINK|lang_en|Variable-length_code|variable-length code]] table for encoding a source symbol (such as a character in a file).  The algorithm derives this table from the estimated probability or frequency of occurrence (*weight*) for each possible value of the source symbol.  As in other [[LINK|lang_en|Entropy_encoding|entropy encoding]] methods, more common symbols are generally represented using fewer bits than less common symbols.  Huffman's method can be efficiently implemented, finding a code in time [[LINK|lang_en|Linear_time|linear]] to the number of input weights if these weights are sorted.[[CITE|2|/wiki/Jan_van_Leeuwen]]  However, although optimal among methods encoding symbols separately, Huffman coding [[LINK|lang_en|ality|is not always optimal]] among all compression methods."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "History"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "In 1951, [[LINK|lang_en|David_A._Huffman|David A. Huffman]] and his [[LINK|lang_en|MIT|MIT]] [[LINK|lang_en|Information_theory|information theory]] classmates were given the choice of a term paper or a final [[LINK|lang_en|Exam|exam]]. The professor, [[LINK|lang_en|Robert_M._Fano|Robert M. Fano]], assigned a [[LINK|lang_en|Term_paper|term paper]] on the problem of finding the most efficient binary code. Huffman, unable to prove any codes were the most efficient, was about to give up and start studying for the final when he hit upon the idea of using a frequency-sorted [[LINK|lang_en|Binary_tree|binary tree]] and quickly proved this method the most efficient.[[CITE|3|http://www.huffmancoding.com/my-uncle/scientific-american]]"
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 2,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "In doing so, Huffman outdid Fano, who had worked with [[LINK|lang_en|Information_theory|information theory]] inventor [[LINK|lang_en|Claude_Shannon|Claude Shannon]] to develop a similar code.  Building the tree from the bottom up guaranteed optimality, unlike top-down [[LINK|lang_en|Shannon-Fano_coding|Shannon-Fano coding]]."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Terminology"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Huffman coding uses a specific method for choosing the representation for each symbol, resulting in a prefix code (sometimes called \"prefix-free codes\", that is, the bit string representing some particular symbol is never a prefix of the bit string representing any other symbol).  Huffman coding is such a widespread method for creating prefix codes that the term \"Huffman code\" is widely used as a synonym for \"prefix code\" even when such a code is not produced by Huffman's algorithm."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Problem definition"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        }
      ],
      "images": [
        {
          "type": "section_image",
          "url": "https://upload.wikimedia.org/wikipedia/commons/d/d8/HuffmanCodeAlg.png",
          "thumb": "https://upload.wikimedia.org/wikipedia/commons/d/d8/HuffmanCodeAlg.png",
          "caption": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Constructing a Huffman Tree"
            }
          ],
          "mime": "image/png",
          "category": "PICTURE",
          "timestamp": "2019-09-12T17:34:50.681Z",
          "media_props": {
            "type": "section_image",
            "srcSet": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/HuffmanCodeAlg.png/330px-HuffmanCodeAlg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/HuffmanCodeAlg.png/440px-HuffmanCodeAlg.png 2x",
            "height": 759,
            "width": 496
          }
        }
      ]
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Informal description"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "dl",
              "attrs": {},
              "items": [
                {
                  "index": 0,
                  "tag_type": "dt",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Given"
                        }
                      ]
                    }
                  ]
                },
                {
                  "index": 1,
                  "tag_type": "dd",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "A set of symbols and their weights (usually "
                        }
                      ]
                    },
                    {
                      "type": "tag",
                      "tag_type": "a",
                      "tag_class": "inline",
                      "attrs": {
                        "href": "/wiki/Proportionality_(mathematics)",
                        "title": "Proportionality (mathematics)"
                      },
                      "content": [
                        {
                          "type": "text",
                          "content": [
                            {
                              "index": 0,
                              "type": "sentence",
                              "text": "proportional"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": " to probabilities)."
                        }
                      ]
                    }
                  ]
                },
                {
                  "index": 2,
                  "tag_type": "dt",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Find"
                        }
                      ]
                    }
                  ]
                },
                {
                  "index": 3,
                  "tag_type": "dd",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "A "
                        }
                      ]
                    },
                    {
                      "type": "tag",
                      "tag_type": "a",
                      "tag_class": "inline",
                      "attrs": {
                        "href": "/wiki/Prefix_code",
                        "title": "Prefix code"
                      },
                      "content": [
                        {
                          "type": "text",
                          "content": [
                            {
                              "index": 0,
                              "type": "sentence",
                              "text": "prefix-free binary code"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": " (a set of codewords) with minimum "
                        }
                      ]
                    },
                    {
                      "type": "tag",
                      "tag_type": "a",
                      "tag_class": "inline",
                      "attrs": {
                        "href": "/wiki/Expected_value",
                        "title": "Expected value"
                      },
                      "content": [
                        {
                          "type": "text",
                          "content": [
                            {
                              "index": 0,
                              "type": "sentence",
                              "text": "expected"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": " codeword length (equivalently, a tree with minimum weighted path length from the root)."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "dl",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Formalized description"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "**Input**."
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "\nAlphabet "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/744cc618a7d5fcb52502bb1b8c353d3b8e26f6d0",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "19.879ex",
                          "height": "2.843ex"
                        },
                        "alt": "{\\displaystyle A=(a_{1},a_{2},\\cdots ,a_{n})}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", which is the symbol alphabet of size "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "1.395ex",
                          "height": "1.676ex"
                        },
                        "alt": "n"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "\nTuple "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/9b44fd87b5e270bef4d31293bb226167a4a80058",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "21.875ex",
                          "height": "2.843ex"
                        },
                        "alt": "{\\displaystyle W=(w_{1},w_{2},\\cdots ,w_{n})}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", which is the tuple of the (positive) symbol weights (usually proportional to probabilities), i.e. "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/1ac240d6b18d1cfc65347a605c575bc2b9735e2b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "27.483ex",
                          "height": "2.843ex"
                        },
                        "alt": "w_{i}=\\mathrm {weight} \\left(a_{i}\\right),1\\leq i\\leq n"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "**Output**."
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "\nCode "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/1a07155b21657d5228c72765d2e8e595eecaed1b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "23.865ex",
                          "height": "2.843ex"
                        },
                        "alt": "{\\displaystyle C\\left(W\\right)=(c_{1},c_{2},\\cdots ,c_{n})}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", which is the tuple of (binary) codewords, where "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/01acb7953ba52c2aa44264b5d0f8fd223aa178a2",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.671ex",
                          "width": "1.807ex",
                          "height": "2.009ex"
                        },
                        "alt": "c_{i}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " is the codeword for "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a94e97768b8a85bb80a5ab67289276413007898a",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.671ex",
                          "width": "12.62ex",
                          "height": "2.509ex"
                        },
                        "alt": "a_{i},1\\leq i\\leq n"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "."
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "**Goal**."
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "br",
                  "tag_class": "void",
                  "attrs": {},
                  "content": []
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "\nLet "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/295fc38a24060725a0c3362655d4b449f047d9ba",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-3.005ex",
                          "width": "32.656ex",
                          "height": "6.843ex"
                        },
                        "alt": "{\\displaystyle L\\left(C\\left(W\\right)\\right)=\\sum _{i=1}^{n}{w_{i}\\times \\mathrm {length} \\left(c_{i}\\right)}}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " be the weighted path length of code "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/4fc55753007cd3c18576f7933f6f089196732029",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "1.766ex",
                          "height": "2.176ex"
                        },
                        "alt": "C"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". Condition: "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/63c5126254b41848d6f67edc04208b368026f067",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "23.323ex",
                          "height": "2.843ex"
                        },
                        "alt": "{\\displaystyle L\\left(C\\left(W\\right)\\right)\\leq L\\left(T\\left(W\\right)\\right)}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " for any code "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/b7af16a09f877fee388c4488bbce59dda95bc409",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "6.268ex",
                          "height": "2.843ex"
                        },
                        "alt": "{\\displaystyle T\\left(W\\right)}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ".\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Example"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "We give an example of the result of Huffman coding for a code with five characters and given weights. We will not verify that it minimizes *L* over all codes, but we will compute *L* and compare it to the [[LINK|lang_en|Shannon_entropy|Shannon entropy]] *H* of the given set of weights; the result is nearly optimal."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 2,
          "items": [
            {
              "type": "body-table",
              "attrs": {
                "className": "wikitable"
              },
              "caption": {
                "attrs": {},
                "sentences": []
              },
              "thead": {
                "rows": [],
                "attrs": {}
              },
              "tbody": {
                "attrs": {},
                "rows": [
                  {
                    "index": 0,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "rowSpan": "2",
                          "style": {
                            "background": "#efefef"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Input (*A*, *W*)\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Symbol (*a*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ")\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "background": "#efefef",
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "a\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "background": "#efefef",
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "b\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "background": "#efefef",
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "c\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "background": "#efefef",
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "d\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "background": "#efefef",
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "e\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 7,
                        "attrs": {
                          "style": {
                            "background": "#efefef"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Sum\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 1,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Weights (*w*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ")\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.10\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.15\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.30\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.16\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.29\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "= 1\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 2,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "rowSpan": "3",
                          "style": {
                            "background": "#efefef"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Output *C*"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Codewords (*c*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ")\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "tag",
                            "tag_type": "tt",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "010"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "tag",
                            "tag_type": "tt",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "011"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "tag",
                            "tag_type": "tt",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "11"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "tag",
                            "tag_type": "tt",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "00"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "tag",
                            "tag_type": "tt",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "10"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 7,
                        "attrs": {
                          "rowSpan": "2"
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": []
                      }
                    ]
                  },
                  {
                    "index": 3,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Codeword length (in bits)"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "br",
                            "tag_class": "void",
                            "attrs": {},
                            "content": []
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "(*l*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ")\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "3\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "3\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 4,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Contribution to weighted path length"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "br",
                            "tag_class": "void",
                            "attrs": {},
                            "content": []
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "(*l*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": " *w*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": " )\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.30\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.45\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.60\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.32\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.58\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "*L*(*C*) = 2.25\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 5,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "rowSpan": "3",
                          "style": {
                            "background": "#efefef"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Optimality\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Probability budget"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "br",
                            "tag_class": "void",
                            "attrs": {},
                            "content": []
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "(2"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sup",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "−*l*"
                                  }
                                ]
                              },
                              {
                                "type": "tag",
                                "tag_type": "sub",
                                "tag_class": "inline",
                                "attrs": {},
                                "content": [
                                  {
                                    "type": "text",
                                    "content": [
                                      {
                                        "index": 0,
                                        "type": "sentence",
                                        "text": "*i*"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ")\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1/8\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1/8\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1/4\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1/4\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1/4\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 7,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "= 1.00\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "index": 6,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Information content (in bits)"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "br",
                            "tag_class": "void",
                            "attrs": {},
                            "content": []
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "(−**log**"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "2"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": " *w*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ") ≈\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "3.32\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2.74\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1.74\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "2.64\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "1.79\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": []
                      }
                    ]
                  },
                  {
                    "index": 7,
                    "attrs": {},
                    "tag_type": "tr",
                    "tag_class": "block",
                    "cells": [
                      {
                        "index": 0,
                        "attrs": {
                          "style": {
                            "background": "#efefef",
                            "fontWeight": "normal"
                          }
                        },
                        "tag_type": "th",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "Contribution to entropy"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "br",
                            "tag_class": "void",
                            "attrs": {},
                            "content": []
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "(−*w*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": " **log**"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "2"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": " *w*"
                              }
                            ]
                          },
                          {
                            "type": "tag",
                            "tag_type": "sub",
                            "tag_class": "inline",
                            "attrs": {},
                            "content": [
                              {
                                "type": "text",
                                "content": [
                                  {
                                    "index": 0,
                                    "type": "sentence",
                                    "text": "*i*"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": ")\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 1,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.332\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 2,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.411\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 3,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.521\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 4,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.423\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 5,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "0.518\n"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "index": 6,
                        "attrs": {
                          "align": "center",
                          "style": {
                            "textAlign": "center"
                          }
                        },
                        "tag_type": "td",
                        "tag_class": "block",
                        "content": [
                          {
                            "type": "text",
                            "content": [
                              {
                                "index": 0,
                                "type": "sentence",
                                "text": "*H*(*A*) = 2.205\n"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "tfoot": {
                "rows": [],
                "attrs": {}
              }
            }
          ],
          "tag_type": "table",
          "attrs": {
            "className": "wikitable"
          }
        },
        {
          "index": 3,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "For any code that is *biunique*, meaning that the code is [[LINK|lang_en|Variable-length_code#Uniquely_decodable_codes|*uniquely decodeable*]], the sum of the probability budgets across all symbols is always less than or equal to one. In this example, the sum is strictly equal to one; as a result, the code is termed a *complete* code. If this is not the case, you can always derive an equivalent code by adding extra symbols (with associated null probabilities), to make the code complete while keeping it *biunique*."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 4,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "As defined by [[LINK|lang_en|A_Mathematical_Theory_of_Communication|Shannon (1948)]], the information content *h* (in bits) of each symbol *a*i with non-null probability is"
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 5,
          "items": [
            {
              "type": "dl",
              "attrs": {},
              "items": [
                {
                  "index": 0,
                  "tag_type": "dd",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "span",
                      "tag_class": "inline",
                      "attrs": {
                        "className": "mwe-math-element"
                      },
                      "content": [
                        {
                          "type": "tag",
                          "tag_type": "img",
                          "tag_class": "void",
                          "attrs": {
                            "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/2799f589d23a9f11345131ef8cef9937c5e7c456",
                            "className": "mwe-math-fallback-image-inline",
                            "aria-hidden": "true",
                            "style": {
                              "verticalAlign": "-2.171ex",
                              "width": "16.636ex",
                              "height": "5.509ex"
                            },
                            "alt": "h(a_{i})=\\log _{2}{1 \\over w_{i}}."
                          },
                          "content": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "dl",
          "attrs": {}
        },
        {
          "index": 6,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The [[LINK|lang_en|Information_entropy|entropy]] *H* (in bits) is the weighted sum, across all symbols *a**i* with non-zero probability *w**i*, of the information content of each symbol:"
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 7,
          "items": [
            {
              "type": "dl",
              "attrs": {},
              "items": [
                {
                  "index": 0,
                  "tag_type": "dd",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "span",
                      "tag_class": "inline",
                      "attrs": {
                        "className": "mwe-math-element"
                      },
                      "content": [
                        {
                          "type": "tag",
                          "tag_type": "img",
                          "tag_class": "void",
                          "attrs": {
                            "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/1be32c5fb44ffa0961a0cf1d506e0bca05c7c3eb",
                            "className": "mwe-math-fallback-image-inline",
                            "aria-hidden": "true",
                            "style": {
                              "verticalAlign": "-3.338ex",
                              "width": "58.555ex",
                              "height": "6.676ex"
                            },
                            "alt": "H(A)=\\sum _{w_{i}>0}w_{i}h(a_{i})=\\sum _{w_{i}>0}w_{i}\\log _{2}{1 \\over w_{i}}=-\\sum _{w_{i}>0}w_{i}\\log _{2}{w_{i}}."
                          },
                          "content": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "dl",
          "attrs": {}
        },
        {
          "index": 8,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "(Note: A symbol with zero probability has zero contribution to the entropy, since "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a25181e71e7e86ccfe31ba981214e6b31f57e7c8",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-2.338ex",
                          "width": "17.621ex",
                          "height": "4.176ex"
                        },
                        "alt": "\\lim _{w\\to 0^{+}}w\\log _{2}w=0"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " So for simplicity, symbols with zero probability can be left out of the formula above.)\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        },
        {
          "index": 9,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "As a consequence of [[LINK|lang_en|Shannon%27s_source_coding_theorem|Shannon's source coding theorem]], the entropy is a measure of the smallest codeword length that is theoretically possible for the given alphabet with associated weights. In this example, the weighted average codeword length is 2.25 bits per symbol, only slightly larger than the calculated entropy of 2.205 bits per symbol. So not only is this code optimal in the sense that no other feasible code performs better, but it is very close to the theoretical limit established by Shannon."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 10,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "In general, a Huffman code need not be unique. Thus the set of Huffman codes for a given probability distribution is a non-empty subset of the codes minimizing "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/f31c05759c645f617ea0ef5952ea24ccef557716",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "5.158ex",
                          "height": "2.843ex"
                        },
                        "alt": "L(C)"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " for that probability distribution. (However, for each minimizing codeword length assignment, there exists at least one Huffman code with those lengths.)\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Basic technique"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Compression"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "The technique works by creating a "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Binary_tree",
                    "title": "Binary tree"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "binary tree"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " of nodes. These can be stored in a regular "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Array_data_type",
                    "title": "Array data type"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "array"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", the size of which depends on the number of symbols, "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "1.395ex",
                          "height": "1.676ex"
                        },
                        "alt": "n"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". A node can be either a "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Leaf_node",
                    "className": "mw-redirect",
                    "title": "Leaf node"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "leaf node"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " or an "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Internal_node",
                    "className": "mw-redirect",
                    "title": "Internal node"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "internal node"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". Initially, all nodes are leaf nodes, which contain the **symbol** itself, the **weight** (frequency of appearance) of the symbol and optionally, a link to a **parent** node which makes it easy to read the code (in reverse) starting from a leaf node. Internal nodes contain a **weight**, links to **two child nodes** and an optional link to a **parent** node. As a common convention, bit '0' represents following the left child and bit '1' represents following the right child. A finished tree has up to "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "1.395ex",
                          "height": "1.676ex"
                        },
                        "alt": "n"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " leaf nodes and "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/fbd0b0f32b28f51962943ee9ede4fb34198a2521",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.505ex",
                          "width": "5.398ex",
                          "height": "2.343ex"
                        },
                        "alt": "n-1"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " internal nodes. A Huffman tree that omits unused symbols produces the most optimal code lengths.\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        },
        {
          "index": 2,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The process begins with the leaf nodes containing the probabilities of the symbol they represent. Then, the process takes the two nodes with smallest probability, and creates a new internal node having these two nodes as children. The weight of the new node is set to the sum of the weight of the children. We then apply the process again, on the new internal node and on the remaining nodes (i.e., we exclude the two leaf nodes), we repeat this process until only one node remains, which is the root of the Huffman tree."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 3,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The simplest construction algorithm uses a [[LINK|lang_en|Priority_queue|priority queue]] where the node with lowest probability is given highest priority:"
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 4,
          "items": [
            {
              "type": "list_item",
              "index": 0,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "Create a leaf node for each symbol and add it to the priority queue."
                }
              ],
              "tag_type": "li"
            },
            {
              "type": "list_item",
              "index": 1,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "While there is more than one node in the queue:\nRemove the two nodes of highest priority (lowest probability) from the queue\nCreate a new internal node with these two nodes as children and with probability equal to the sum of the two nodes' probabilities.\nAdd the new node to the queue."
                }
              ],
              "tag_type": "li"
            },
            {
              "type": "list_item",
              "index": 2,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "The remaining node is the root node and the tree is complete."
                }
              ],
              "tag_type": "li"
            }
          ],
          "tag_type": "ol",
          "attrs": {}
        },
        {
          "index": 5,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Since efficient priority queue data structures require O(log *n*) time per insertion, and a tree with *n* leaves has 2*n*−1 nodes, this algorithm operates in O(*n* log *n*) time, where *n* is the number of symbols."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 6,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "If the symbols are sorted by probability, there is a [[LINK|lang_en|Linear-time|linear-time]] (O(*n*)) method to create a Huffman tree using two [[LINK|lang_en|Queue_(data_structure)|queues]], the first one containing the initial weights (along with pointers to the associated leaves), and combined weights (along with pointers to the trees) being put in the back of the second queue. This assures that the lowest weight is always kept at the front of one of the two queues:"
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 7,
          "items": [
            {
              "type": "list_item",
              "index": 0,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "Start with as many leaves as there are symbols."
                }
              ],
              "tag_type": "li"
            },
            {
              "type": "list_item",
              "index": 1,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "Enqueue all leaf nodes into the first queue (by probability in increasing order so that the least likely item is in the head of the queue)."
                }
              ],
              "tag_type": "li"
            },
            {
              "type": "list_item",
              "index": 2,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "While there is more than one node in the queues:\nDequeue the two nodes with the lowest weight by examining the fronts of both queues.\nCreate a new internal node, with the two just-removed nodes as children (either node can be either child) and the sum of their weights as the new weight.\nEnqueue the new node into the rear of the second queue."
                }
              ],
              "tag_type": "li"
            },
            {
              "type": "list_item",
              "index": 3,
              "sentences": [
                {
                  "type": "sentence",
                  "index": 0,
                  "text": "The remaining node is the root node; the tree has now been generated."
                }
              ],
              "tag_type": "li"
            }
          ],
          "tag_type": "ol",
          "attrs": {}
        },
        {
          "index": 8,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "In many cases, time complexity is not very important in the choice of algorithm here, since *n* here is the number of symbols in the alphabet, which is typically a very small number (compared to the length of the message to be encoded); whereas complexity analysis concerns the behavior when *n* grows to be very large."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 9,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "It is generally beneficial to minimize the variance of codeword length. For example, a communication buffer receiving Huffman-encoded data may need to be larger to deal with especially long symbols if the tree is especially unbalanced. To minimize variance, simply break ties between queues by choosing the item in the first queue.   This modification will retain the mathematical optimality of the Huffman coding while both minimizing variance and minimizing the length of the longest character code."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": [
        {
          "type": "section_image",
          "url": "https://upload.wikimedia.org/wikipedia/commons/a/a0/Huffman_coding_visualisation.svg",
          "thumb": "https://upload.wikimedia.org/wikipedia/commons/a/a0/Huffman_coding_visualisation.svg",
          "caption": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Visualisation of the use of Huffman coding to encode the message \"A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BED\". In steps 2 to 6, the letters are sorted by increasing frequency, and the least frequent two at each step are combined and reinserted into the list, and a partial tree is constructed. The final tree in step 6 is traversed to generate the dictionary in step 7. Step 8 uses it to encode the message."
            }
          ],
          "mime": "image/svg+xml",
          "category": "PICTURE",
          "timestamp": "2019-09-12T17:34:50.698Z",
          "media_props": {
            "type": "section_image",
            "srcSet": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Huffman_coding_visualisation.svg/540px-Huffman_coding_visualisation.svg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Huffman_coding_visualisation.svg/720px-Huffman_coding_visualisation.svg.png 2x",
            "height": 384,
            "width": 512
          }
        },
        {
          "type": "section_image",
          "url": "https://upload.wikimedia.org/wikipedia/commons/7/74/Huffman_coding_example.svg",
          "thumb": "https://upload.wikimedia.org/wikipedia/commons/7/74/Huffman_coding_example.svg",
          "caption": [
            {
              "type": "sentence",
              "index": 0,
              "text": "A source generates 4 different symbols  with probability . A binary tree is generated from left to right taking the two least probable symbols and putting them together to form another equivalent symbol having a probability that equals the sum of the two symbols. The process is repeated until there is just one symbol. The tree can then be read backwards, from right to left, assigning different bits to different branches. The final Huffman code is:   Symbol Code   a1 0   a2 10   a3 110   a4 111   The standard way to represent a signal made of 4 symbols is by using 2 bits/symbol, but the [[LINK|lang_en|Information_entropy|entropy]] of the source is 1.74 bits/symbol. If this Huffman code is used to represent the signal, then the average length is lowered to 1.85 bits/symbol; it is still far from the theoretical limit because the probabilities of the symbols are different from negative powers of two."
            }
          ],
          "mime": "image/svg+xml",
          "category": "PICTURE",
          "timestamp": "2019-09-12T17:34:50.700Z",
          "media_props": {
            "type": "section_image",
            "srcSet": "https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Huffman_coding_example.svg/330px-Huffman_coding_example.svg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Huffman_coding_example.svg/440px-Huffman_coding_example.svg.png 2x",
            "height": 133,
            "width": 277
          }
        }
      ]
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Decompression"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "Generally speaking, the process of decompression is simply a matter of translating the stream of prefix codes to individual byte values, usually by traversing the Huffman tree node by node as each bit is read from the input stream (reaching a leaf node necessarily terminates the search for that particular byte value). Before this can take place, however, the Huffman tree must be somehow reconstructed. In the simplest case, where character frequencies are fairly predictable, the tree can be preconstructed (and even statistically adjusted on each compression cycle) and thus reused every time, at the expense of at least some measure of compression efficiency. Otherwise, the information to reconstruct the tree must be sent a priori. A naive approach might be to prepend the frequency count of each character to the compression stream. Unfortunately, the overhead in such a case could amount to several kilobytes, so this method has little practical use. If the data is compressed using "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Canonical_Huffman_code",
                    "title": "Canonical Huffman code"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "canonical encoding"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", the compression model can be precisely reconstructed with just "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/b3836d40fb701e1d06cabf445b8d9ece5f84f9cb",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "4.406ex",
                          "height": "2.676ex"
                        },
                        "alt": "B2^{B}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " bits of information (where "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/47136aad860d145f75f3eed3022df827cee94d7a",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "1.764ex",
                          "height": "2.176ex"
                        },
                        "alt": "B"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " is the number of bits per symbol). Another method is to simply prepend the Huffman tree, bit by bit, to the output stream. For example, assuming that the value of 0 represents a parent node and 1 a leaf node, whenever the latter is encountered the tree building routine simply reads the next 8 bits to determine the character value of that particular leaf. The process continues recursively until the last leaf node is reached; at that point, the Huffman tree will thus be faithfully reconstructed. The overhead using such a method ranges from roughly 2 to 320 bytes (assuming an 8-bit alphabet). Many other techniques are possible as well. In any case, since the compressed data can include unused \"trailing bits\" the decompressor must be able to determine when to stop producing output. This can be accomplished by either transmitting the length of the decompressed data along with the compression model or by defining a special code symbol to signify the end of input (the latter method can adversely affect code length optimality, however).\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Main properties"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The probabilities used can be generic ones for the application domain that are based on average experience, or they can be the actual frequencies found in the text being compressed.\nThis requires that a [[LINK|lang_en|Frequency_table|frequency table]] must be stored with the compressed text. See the Decompression section above for more information about the various techniques employed for this purpose."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Optimality"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "dl",
              "attrs": {},
              "items": [
                {
                  "index": 0,
                  "tag_type": "dd",
                  "tag_class": "block",
                  "attrs": {},
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "*See also "
                        }
                      ]
                    },
                    {
                      "type": "tag",
                      "tag_type": "a",
                      "tag_class": "inline",
                      "attrs": {
                        "href": "/wiki/Arithmetic_coding#Huffman_coding",
                        "title": "Arithmetic coding"
                      },
                      "content": [
                        {
                          "type": "text",
                          "content": [
                            {
                              "index": 0,
                              "type": "sentence",
                              "text": "Arithmetic coding#Huffman coding"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "*"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "dl",
          "attrs": {}
        },
        {
          "index": 2,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Huffman's original algorithm is optimal for a symbol-by-symbol coding with a known input probability distribution, i.e., separately encoding unrelated symbols in such a data stream.  However, it is not optimal when the symbol-by-symbol restriction is dropped, or when the [[LINK|lang_en|Probability_mass_function|probability mass functions]] are unknown.  Also, if symbols are not [[LINK|lang_en|Independent_and_identically_distributed|independent and identically distributed]], a single code may be insufficient for optimality.  Other methods such as [[LINK|lang_en|Arithmetic_coding|arithmetic coding]] often have better compression capability."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 3,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Although both aforementioned methods can combine an arbitrary number of symbols for more efficient coding and generally adapt to the actual input statistics, arithmetic coding does so without significantly increasing its computational or algorithmic complexities (though the simplest version is slower and more complex than Huffman coding).  Such flexibility is especially useful when input probabilities are not precisely known or vary significantly within the stream.  However, Huffman coding is usually faster and arithmetic coding was historically a subject of some concern over [[LINK|lang_en|Patent|patent]] issues.  Thus many technologies have historically avoided arithmetic coding in favor of Huffman and other prefix coding techniques.  As of mid-2010, the most commonly used techniques for this alternative to Huffman coding have passed into the public domain as the early patents have expired."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 4,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "For a set of symbols with a uniform probability distribution and a number of members which is a [[LINK|lang_en|Power_of_two|power of two]], Huffman coding is equivalent to simple binary [[LINK|lang_en|Block_code|block encoding]], e.g., [[LINK|lang_en|ASCII|ASCII]] coding.  This reflects the fact that compression is not possible with such an input, no matter what the compression method, i.e., doing nothing to the data is the optimal thing to do."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 5,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Huffman coding is optimal among all methods in any case where each input symbol is a known independent and identically distributed random variable having a probability that is [[LINK|lang_en|Dyadic_distribution|dyadic]]. Prefix codes, and thus Huffman coding in particular, tend to have inefficiency on small alphabets, where probabilities often fall between these optimal (dyadic) points. The worst case for Huffman coding can happen when the probability of the most likely symbol far exceeds 2−1 = 0.5, making the upper limit of inefficiency unbounded."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 6,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "There are two related approaches for getting around this particular inefficiency while still using Huffman coding.  Combining a fixed number of symbols together (\"blocking\") often increases (and never decreases) compression.  As the size of the block approaches infinity,  Huffman coding theoretically approaches the entropy limit, i.e., optimal compression.  However, blocking arbitrarily large groups of symbols is impractical, as the complexity of a Huffman code is linear in the number of possibilities to be encoded, a number that is exponential in the size of a block.  This limits the amount of blocking that is done in practice."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 7,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "A practical alternative, in widespread use, is [[LINK|lang_en|Run-length_encoding|run-length encoding]].  This technique adds one step in advance of entropy coding, specifically counting (runs) of repeated symbols, which are then encoded.  For the simple case of [[LINK|lang_en|Bernoulli_process|Bernoulli processes]], [[LINK|lang_en|Golomb_coding|Golomb coding]] is optimal among prefix codes for coding run length, a fact proved via the techniques of Huffman coding.[[CITE|4|/wiki/IEEE_Transactions_on_Information_Theory]]  A similar approach is taken by fax machines using [[LINK|lang_en|Modified_Huffman_coding|modified Huffman coding]].  However, run-length coding is not as adaptable to as many input types as other compression technologies."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Variations"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Many variations of Huffman coding exist,[[CITE|5|/wiki/Office_of_Naval_Research]] some of which use a Huffman-like algorithm, and others of which find optimal prefix codes (while, for example, putting different restrictions on the output). Note that, in the latter case, the method need not be Huffman-like, and, indeed, need not even be [[LINK|lang_en|Polynomial_time|polynomial time]]."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "*n*-ary Huffman coding"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The ***n*** algorithm uses the {0, 1, ... , *n* − 1} alphabet to encode message and build an *n*-ary tree. This approach was considered by Huffman in his original paper. The same algorithm applies as for binary (*n* equals 2) codes, except that the *n* least probable symbols are taken together, instead of just the 2 least probable. Note that for *n* greater than 2, not all sets of source words can properly form an *n*-ary tree for Huffman coding. In these cases, additional 0-probability place holders must be added. This is because the tree must form an *n* to 1 contractor; for binary coding, this is a 2 to 1 contractor, and any sized set can form such a contractor.  If the number of source words is congruent to 1 modulo *n*-1, then the set of source words will form a proper Huffman tree."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Adaptive Huffman coding"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "A variation called **[[LINK|lang_en|Adaptive_Huffman_coding|adaptive Huffman coding]]** involves calculating the probabilities dynamically based on recent actual frequencies in the sequence of source symbols, and changing the coding tree structure to match the updated probability estimates. It is used rarely in practice, since the cost of updating the tree makes it slower than optimized [[LINK|lang_en|Arithmetic_coding#Adaptive_arithmetic_coding|adaptive arithmetic coding]], which is more flexible and has better compression."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Huffman template algorithm"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "Most often, the weights used in implementations of Huffman coding represent numeric probabilities, but the algorithm given above does not require this; it requires only that the weights form a "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Total_order",
                    "title": "Total order"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "totally ordered"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Monoid#Commutative_monoid",
                    "title": "Monoid"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "commutative monoid"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", meaning a way to order weights and to add them. The **Huffman template algorithm** enables one to use any kind of weights (costs, frequencies, pairs of weights, non-numerical weights) and one of many combining methods (not just addition). Such algorithms can solve other minimization problems, such as minimizing "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/1a80c0b460cf854976824c251037db43d7ed1810",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-2.005ex",
                          "width": "21.645ex",
                          "height": "4.009ex"
                        },
                        "alt": "\\max _{i}\\left[w_{i}+\\mathrm {length} \\left(c_{i}\\right)\\right]"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", a problem first applied to circuit design.\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Length-limited Huffman coding/minimum variance Huffman coding"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "**Length-limited Huffman coding** is a variant where the goal is still to achieve a minimum weighted path length, but there is an additional restriction that the length of each codeword must be less than a given constant. The "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Package-merge_algorithm",
                    "title": "Package-merge algorithm"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "package-merge algorithm"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " solves this problem with a simple "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Greedy_algorithm",
                    "title": "Greedy algorithm"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "greedy"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " approach very similar to that used by Huffman's algorithm. Its time complexity is "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a115e943ca1827d51630227813a09e82b0980b8c",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "6.56ex",
                          "height": "2.843ex"
                        },
                        "alt": "O(nL)"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", where "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/103168b86f781fe6e9a4a87b8ea1cebe0ad4ede8",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.338ex",
                          "width": "1.583ex",
                          "height": "2.176ex"
                        },
                        "alt": "L"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " is the maximum length of a codeword. No algorithm is known to solve this problem in "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Big_O_notation#Orders_of_common_functions",
                    "title": "Big O notation"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "span",
                      "tag_class": "inline",
                      "attrs": {
                        "className": "mwe-math-element"
                      },
                      "content": [
                        {
                          "type": "tag",
                          "tag_type": "img",
                          "tag_class": "void",
                          "attrs": {
                            "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/34109fe397fdcff370079185bfdb65826cb5565a",
                            "className": "mwe-math-fallback-image-inline",
                            "aria-hidden": "true",
                            "style": {
                              "verticalAlign": "-0.838ex",
                              "width": "4.977ex",
                              "height": "2.843ex"
                            },
                            "alt": "O(n)"
                          },
                          "content": []
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": " or "
                        }
                      ]
                    },
                    {
                      "type": "tag",
                      "tag_type": "span",
                      "tag_class": "inline",
                      "attrs": {
                        "className": "mwe-math-element"
                      },
                      "content": [
                        {
                          "type": "tag",
                          "tag_type": "img",
                          "tag_class": "void",
                          "attrs": {
                            "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/9d2320768fb54880ca4356e61f60eb02a3f9d9f1",
                            "className": "mwe-math-fallback-image-inline",
                            "aria-hidden": "true",
                            "style": {
                              "verticalAlign": "-0.838ex",
                              "width": "10.118ex",
                              "height": "2.843ex"
                            },
                            "alt": "O(n\\log n)"
                          },
                          "content": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " time, unlike the presorted and unsorted conventional Huffman problems, respectively.\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Huffman coding with unequal letter costs"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "In the standard Huffman coding problem, it is assumed that each symbol in the set that the code words are constructed from has an equal cost to transmit: a code word whose length is *N* digits will always have a cost of *N*, no matter how many of those digits are 0s, how many are 1s, etc. When working under this assumption, minimizing the total cost of the message and minimizing the total number of digits are the same thing."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 2,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "*Huffman coding with unequal letter costs* is the generalization without this assumption: the letters of the encoding alphabet may have non-uniform lengths, due to characteristics of the transmission medium. An example is the encoding alphabet of [[LINK|lang_en|Morse_code|Morse code]], where a 'dash' takes longer to send than a 'dot', and therefore the cost of a dash in transmission time is higher. The goal is still to minimize the weighted average codeword length, but it is no longer sufficient just to minimize the number of symbols used by the message. No algorithm is known to solve this in the same manner or with the same efficiency as conventional Huffman coding, though it has been solved by Karp  [[CITE|11|http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1057615&newsearch=true&queryText=Minimum-redundancy%20coding%20for%20the%20discrete%20noiseless%20channel]]  whose solution has been refined for the case of integer costs by Golin  [[CITE|12|http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=705558&queryText=dynamic%20programming%20golin%20constructing%20optimal%20prefix-free&newsearch=true]] ."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Optimal alphabetic binary trees (Hu–Tucker coding)"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "In the standard Huffman coding problem, it is assumed that any codeword can correspond to any input symbol. In the alphabetic version, the alphabetic order of inputs and outputs must be identical. Thus, for example, "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/5253725abd6a5bf17a59383638d748fc80e2eec0",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "12.469ex",
                          "height": "2.843ex"
                        },
                        "alt": "A=\\left\\{a,b,c\\right\\}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " could not be assigned code "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/c2940f22ba0b9fd277c1387648c319cae29a836b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "22.107ex",
                          "height": "2.843ex"
                        },
                        "alt": "H\\left(A,C\\right)=\\left\\{00,1,01\\right\\}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", but instead should be assigned either "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/a2f3f93c449df17971e9f5e0587e6168514b7822",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "22.107ex",
                          "height": "2.843ex"
                        },
                        "alt": "H\\left(A,C\\right)=\\left\\{00,01,1\\right\\}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " or "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/19021e4b2119067cacc69927449535e2dae0ee8d",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "22.107ex",
                          "height": "2.843ex"
                        },
                        "alt": "H\\left(A,C\\right)=\\left\\{0,10,11\\right\\}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". This is also known as the **Hu–Tucker** problem, after T. C. Hu and "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Alan_Tucker",
                    "title": "Alan Tucker"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Alan Tucker"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", the authors of the paper presenting the first "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Time_complexity#Quasilinear_time",
                    "title": "Time complexity"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "span",
                      "tag_class": "inline",
                      "attrs": {
                        "className": "mwe-math-element"
                      },
                      "content": [
                        {
                          "type": "tag",
                          "tag_type": "img",
                          "tag_class": "void",
                          "attrs": {
                            "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/9d2320768fb54880ca4356e61f60eb02a3f9d9f1",
                            "className": "mwe-math-fallback-image-inline",
                            "aria-hidden": "true",
                            "style": {
                              "verticalAlign": "-0.838ex",
                              "width": "10.118ex",
                              "height": "2.843ex"
                            },
                            "alt": "O(n\\log n)"
                          },
                          "content": []
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "-time"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " solution to this optimal binary alphabetic problem,[[CITE|6|/wiki/Alan_Tucker]] which has some similarities to Huffman algorithm, but is not a variation of this algorithm. A later method, the "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Garsia%E2%80%93Wachs_algorithm",
                    "title": "Garsia–Wachs algorithm"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Garsia–Wachs algorithm"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " of "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Adriano_Garsia",
                    "title": "Adriano Garsia"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Adriano Garsia"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " and "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Michelle_L._Wachs",
                    "title": "Michelle L. Wachs"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Michelle L. Wachs"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": " (1977), uses simpler logic to perform the same comparisons in the same total time bound. These optimal alphabetic binary trees are often used as "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Binary_search_tree",
                    "title": "Binary search tree"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "binary search trees"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ".[[CITE|7|/wiki/Donald_Knuth]]"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "The canonical Huffman code"
            }
          ],
          "tag_type": "h3",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "samp",
              "attrs": {
                "className": "math"
              },
              "items": [
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": "If weights corresponding to the alphabetically ordered inputs are in numerical order, the Huffman code has the same lengths as the optimal alphabetic code, which can be found from calculating these lengths, rendering Hu–Tucker coding unnecessary. The code resulting from numerically (re-)ordered input is sometimes called the *canonical Huffman code* and is often the code used in practice, due to ease of encoding/decoding. The technique for finding this code is sometimes called **Huffman-Shannon-Fano coding**, since it is optimal like Huffman coding, but alphabetic in weight probability, like "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "a",
                  "tag_class": "inline",
                  "attrs": {
                    "href": "/wiki/Shannon-Fano_coding",
                    "className": "mw-redirect",
                    "title": "Shannon-Fano coding"
                  },
                  "content": [
                    {
                      "type": "text",
                      "content": [
                        {
                          "index": 0,
                          "type": "sentence",
                          "text": "Shannon-Fano coding"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ". The Huffman-Shannon-Fano code corresponding to the example is "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/66716f2fabf56efc6c70dcd44dfb4c0b5937ed8b",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "20.41ex",
                          "height": "2.843ex"
                        },
                        "alt": "\\{000,001,01,10,11\\}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ", which, having the same codeword lengths as the original solution, is also optimal. But in *canonical Huffman code*, the result is "
                    }
                  ]
                },
                {
                  "type": "tag",
                  "tag_type": "span",
                  "tag_class": "inline",
                  "attrs": {
                    "className": "mwe-math-element"
                  },
                  "content": [
                    {
                      "type": "tag",
                      "tag_type": "img",
                      "tag_class": "void",
                      "attrs": {
                        "src": "https://wikimedia.org/api/rest_v1/media/math/render/svg/7fed0dac074f7e39fcfe91e5cae47c22bbb2f4ac",
                        "className": "mwe-math-fallback-image-inline",
                        "aria-hidden": "true",
                        "style": {
                          "verticalAlign": "-0.838ex",
                          "width": "20.41ex",
                          "height": "2.843ex"
                        },
                        "alt": "\\{110,111,00,01,10\\}"
                      },
                      "content": []
                    }
                  ]
                },
                {
                  "type": "text",
                  "content": [
                    {
                      "index": 0,
                      "type": "sentence",
                      "text": ".\n"
                    }
                  ]
                }
              ]
            }
          ],
          "tag_type": "samp",
          "attrs": {
            "className": "math"
          }
        }
      ],
      "images": []
    },
    {
      "paragraphs": [
        {
          "index": 0,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Applications"
            }
          ],
          "tag_type": "h2",
          "attrs": {}
        },
        {
          "index": 1,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "[[LINK|lang_en|Arithmetic_coding|Arithmetic coding]] and Huffman coding produce equivalent results — achieving entropy — when every symbol has a probability of the form 1/2*k*.  In other circumstances, arithmetic coding can offer better compression than Huffman coding because — intuitively — its \"code words\" can have effectively non-integer bit lengths, whereas code words in prefix codes such as Huffman codes can only have an integer number of bits. Therefore, a code word of length *k* only optimally matches a symbol of probability 1/2*k* and other probabilities are not represented optimally; whereas the code word length in arithmetic coding can be made to exactly match the true probability of the symbol.  This difference is especially striking for small alphabet sizes."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        },
        {
          "index": 2,
          "items": [
            {
              "type": "sentence",
              "index": 0,
              "text": "Prefix codes nevertheless remain in wide use because of their simplicity, high speed, and [[LINK|lang_en|Arithmetic_coding#US_patents|lack of patent coverage]].  They are often used as a \"back-end\" to other compression methods.  [[LINK|lang_en|DEFLATE_(algorithm)|DEFLATE]] ([[LINK|lang_en|PKZIP|PKZIP]]'s algorithm) and multimedia [[LINK|lang_en|Codec|codecs]] such as [[LINK|lang_en|JPEG|JPEG]] and [[LINK|lang_en|MP3|MP3]] have a front-end model and [[LINK|lang_en|Quantization_(signal_processing)|quantization]] followed by the use of prefix codes; these are often called \"Huffman codes\" even though most applications use pre-defined variable-length codes rather than codes designed using Huffman's algorithm."
            }
          ],
          "tag_type": "p",
          "attrs": {}
        }
      ],
      "images": []
    }
  ],
  "infoboxes": [],
  "citations": [
    {
      "url": "/wiki/David_A._Huffman",
      "thumb": null,
      "category": "NONE",
      "citation_id": 1,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman, D. (1952). \"A Method for the Construction of Minimum-Redundancy Codes\" (PDF). *Proceedings of the IRE*. **40** (9): 1098–1101. doi:10.1109/JRPROC.1952.273898."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.978Z",
      "mime": null
    },
    {
      "url": "/wiki/Jan_van_Leeuwen",
      "thumb": null,
      "category": "NONE",
      "citation_id": 2,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Van Leeuwen, Jan (1976). \"On the construction of Huffman trees\" (PDF). *ICALP*: 382–410. Retrieved 2014-02-20."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.979Z",
      "mime": null
    },
    {
      "url": "http://www.huffmancoding.com/my-uncle/scientific-american",
      "thumb": "https://www.huffmancoding.com/favicon.ico",
      "category": "NONE",
      "citation_id": 3,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman, Ken (1991). \"Profile: David A. Huffman: Encoding the \"Neatness\" of Ones and Zeroes\". *Scientific American*: 54–58."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.980Z",
      "mime": null
    },
    {
      "url": "/wiki/IEEE_Transactions_on_Information_Theory",
      "thumb": null,
      "category": "NONE",
      "citation_id": 4,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Gallager, R.G.; van Voorhis, D.C. (1975). \"Optimal source codes for geometrically distributed integer alphabets\". *IEEE Transactions on Information Theory*. **21** (2): 228–230. doi:10.1109/TIT.1975.1055357."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.980Z",
      "mime": null
    },
    {
      "url": "/wiki/Office_of_Naval_Research",
      "thumb": null,
      "category": "NONE",
      "citation_id": 5,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Abrahams, J. (1997-06-11).  Written at Arlington, VA, USA. Division of Mathematics, Computer & Information Sciences, Office of Naval Research (ONR). \"Code and Parse Trees for Lossless Source Encoding\". *Compression and Complexity of Sequences 1997 Proceedings*. Salerno: IEEE: 145–171. CiteSeerX 10.1.1.589.4726. doi:10.1109/SEQUEN.1997.666911. ISBN 0-8186-8132-2. Retrieved 2016-02-09."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.981Z",
      "mime": null
    },
    {
      "url": "/wiki/Alan_Tucker",
      "thumb": null,
      "category": "PERIODICAL",
      "citation_id": 6,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Hu, T. C.; Tucker, A. C. (1971). \"Optimal Computer Search Trees and Variable-Length Alphabetical Codes\". *SIAM Journal on Applied Mathematics*. **21** (4): 514. doi:10.1137/0121057. JSTOR 2099603."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.981Z",
      "mime": null
    },
    {
      "url": "/wiki/Donald_Knuth",
      "thumb": null,
      "category": "BOOK",
      "citation_id": 7,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Knuth, Donald E. (1998), \"Algorithm G (Garsia–Wachs algorithm for optimum binary trees)\", *The Art of Computer Programming, Vol. 3: Sorting and Searching* (2nd ed.), Addison–Wesley, pp. 451–453. See also History and bibliography, pp. 453–454."
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:48.981Z",
      "mime": null
    },
    {
      "url": "http://rosettacode.org/wiki/Huffman_coding",
      "thumb": null,
      "category": "NONE",
      "citation_id": 8,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman coding in various languages on Rosetta Code"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.654Z",
      "mime": null
    },
    {
      "url": "https://gist.github.com/jasonrdsouza/1c9c895f43497d15eb2e",
      "thumb": null,
      "category": "NONE",
      "citation_id": 9,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman codes (python implementation)"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.654Z",
      "mime": null
    },
    {
      "url": "https://demo.tinyray.com/huffman",
      "thumb": null,
      "category": "NONE",
      "citation_id": 10,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "A visualization of Huffman coding"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.655Z",
      "mime": null
    },
    {
      "url": "http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1057615&newsearch=true&queryText=Minimum-redundancy%20coding%20for%20the%20discrete%20noiseless%20channel",
      "thumb": null,
      "category": "NONE",
      "citation_id": 11,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Karp"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.655Z",
      "mime": null
    },
    {
      "url": "http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=705558&queryText=dynamic%20programming%20golin%20constructing%20optimal%20prefix-free&newsearch=true",
      "thumb": null,
      "category": "NONE",
      "citation_id": 12,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Golin"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.656Z",
      "mime": null
    },
    {
      "url": "http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf",
      "thumb": null,
      "category": "FILE",
      "citation_id": 13,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "\"A Method for the Construction of Minimum-Redundancy Codes\""
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.656Z",
      "mime": "application/pdf"
    },
    {
      "url": "http://doi.org/10.1109%2FJRPROC.1952.273898",
      "thumb": null,
      "category": "NONE",
      "citation_id": 14,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "10.1109/JRPROC.1952.273898"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.657Z",
      "mime": null
    },
    {
      "url": "http://www.staff.science.uu.nl/~leeuw112/huffman.pdf",
      "thumb": null,
      "category": "FILE",
      "citation_id": 15,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "\"On the construction of Huffman trees\""
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.657Z",
      "mime": "application/pdf"
    },
    {
      "url": "http://www.huffmancoding.com/my-uncle/scientific-american",
      "thumb": null,
      "category": "NONE",
      "citation_id": 16,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "\"Profile: David A. Huffman: Encoding the \"Neatness\" of Ones and Zeroes\""
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.657Z",
      "mime": null
    },
    {
      "url": "http://doi.org/10.1109%2FTIT.1975.1055357",
      "thumb": null,
      "category": "NONE",
      "citation_id": 17,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "10.1109/TIT.1975.1055357"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.657Z",
      "mime": null
    },
    {
      "url": "http://ieeexplore.ieee.org/xpl/login.jsp?reload=true&tp=&arnumber=666911",
      "thumb": null,
      "category": "NONE",
      "citation_id": 18,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "\"Code and Parse Trees for Lossless Source Encoding\""
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.658Z",
      "mime": null
    },
    {
      "url": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.589.4726",
      "thumb": null,
      "category": "NONE",
      "citation_id": 19,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "10.1.1.589.4726"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.658Z",
      "mime": null
    },
    {
      "url": "http://doi.org/10.1109%2FSEQUEN.1997.666911",
      "thumb": null,
      "category": "NONE",
      "citation_id": 20,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "10.1109/SEQUEN.1997.666911"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.658Z",
      "mime": null
    },
    {
      "url": "http://doi.org/10.1137%2F0121057",
      "thumb": null,
      "category": "NONE",
      "citation_id": 21,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "10.1137/0121057"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.658Z",
      "mime": null
    },
    {
      "url": "http://www.jstor.org/stable/2099603",
      "thumb": null,
      "category": "NONE",
      "citation_id": 22,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "2099603"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.659Z",
      "mime": null
    },
    {
      "url": "http://rosettacode.org/wiki/Huffman_coding",
      "thumb": null,
      "category": "NONE",
      "citation_id": 23,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman coding in various languages on Rosetta Code"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.659Z",
      "mime": null
    },
    {
      "url": "https://gist.github.com/jasonrdsouza/1c9c895f43497d15eb2e",
      "thumb": null,
      "category": "NONE",
      "citation_id": 24,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "Huffman codes (python implementation)"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.659Z",
      "mime": null
    },
    {
      "url": "https://demo.tinyray.com/huffman",
      "thumb": null,
      "category": "NONE",
      "citation_id": 25,
      "description": [
        {
          "type": "sentence",
          "index": 0,
          "text": "A visualization of Huffman coding"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.659Z",
      "mime": null
    },
    {
      "url": "https://en.wikipedia.org/wiki/Huffman_coding",
      "thumb": null,
      "category": "NONE",
      "citation_id": 26,
      "description": [
        {
          "index": 0,
          "text": "The original version of this page is from Wikipedia, you can edit the page right here on Everipedia.",
          "type": "sentence"
        },
        {
          "index": 1,
          "text": "Text is available under the Creative Commons Attribution-ShareAlike License.",
          "type": "sentence"
        },
        {
          "index": 2,
          "text": "Additional terms may apply.",
          "type": "sentence"
        },
        {
          "index": 3,
          "text": "See everipedia.org/everipedia-termsfor further details.",
          "type": "sentence"
        },
        {
          "index": 4,
          "text": "Images/media credited individually (click the icon for details).",
          "type": "sentence"
        }
      ],
      "social_type": null,
      "attribution": "rel=nofollow",
      "timestamp": "2019-09-12T17:34:50.663Z",
      "mime": null
    }
  ],
  "media_gallery": [],
  "metadata": [
    {
      "key": "page_type",
      "value": "Thing"
    },
    {
      "key": "is_removed",
      "value": false
    },
    {
      "key": "is_adult_content",
      "value": false
    },
    {
      "key": "sub_page_type",
      "value": null
    },
    {
      "key": "is_wikipedia_import",
      "value": true
    },
    {
      "key": "is_indexed",
      "value": false
    },
    {
      "key": "bing_index_override",
      "value": true
    },
    {
      "key": "is_locked",
      "value": false
    },
    {
      "key": "creation_timestamp",
      "value": "8/12/2019 17:34:44 PM UTC"
    },
    {
      "key": "last_modified",
      "value": null
    },
    {
      "key": "page_lang",
      "value": "en"
    },
    {
      "key": "url_slug",
      "value": "Huffman_coding"
    },
    {
      "key": "url_slug_alternate",
      "value": "Huffman_coding"
    }
  ],
  "amp_info": {
    "load_youtube_js": false,
    "load_audio_js": false,
    "load_video_js": false,
    "lightboxes": []
  },
  "ipfs_hash": "QmbTgzCAQwenUx5W4j2eFFZx3CWkdzyFPAB91iD46YUChD"
}