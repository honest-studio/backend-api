user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

#sudo systemctl restart nginx

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	client_max_body_size 4m;

	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
	
	# Main Frontend
        server {
                listen 80;
                server_name www.everipedia.org everipedia.org www.everipedia.com everipedia.com;
		rewrite ^ https://$http_host$request_uri? permanent;    # force redirect http to https
        }
	server {
		listen 443;
                server_name www.everipedia.org www.everipedia.com everipedia.com;

		ssl on;
		ssl_certificate /home/beekeeper/certs/everipedia_org.crt;
		ssl_certificate_key /home/beekeeper/certs/everipedia_org.key;

		rewrite ^ https://everipedia.org$request_uri? permanent;    # force everipedia.com to everipedia.org
	}
	server {
		listen 443;
                server_name everipedia.org;
		
		ssl on;
		ssl_certificate /home/beekeeper/certs/everipedia_org.crt;
		ssl_certificate_key /home/beekeeper/certs/everipedia_org.key;

		# Legacy Links w/o lang_ 
		rewrite ^/wiki/((?!lang_)[^/]*)/?$ https://everipedia.org/wiki/lang_en/$1 redirect;

		root /home/beekeeper/livefront/;

		# AMP - Re-write legacy URLs of form /wiki/{slug}/amp
		rewrite ^/wiki/((?!lang_).*)/amp/?$ https://everipedia.org/wiki/lang_en/$1/amp/ redirect;

		# AMP - Fetch AMP page from backend
		location ~ ^/wiki/(.*)/amp/?$ {
			add_header X-uri "$1";
			proxy_pass http://127.0.0.1:3001/v2/wiki/amp/$1;
		}

		location / {
			try_files $uri @prerender;
		}

		location /images/ {
           add_header Cache-Control "public, max-age=604801";
       }

		location /static/ {
           add_header Cache-Control "public, max-age=3600";
       }

		location /sitemaps/recent/(.*).xml$ {
			proxy_pass http://127.0.0.1:3001/v2/sitemap/recent/$1;
		}

		location /sitemaps {
			alias /home/beekeeper/ep2-backend/public/sitemaps;
                        try_files $uri =404;
		}



		location @prerender {
			proxy_set_header X-Prerender-Token Ild0KvWjX7W3AflG1H9B;
			set $prerender 0;
		
			if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
				set $prerender 1;
			}
		
			if ($args ~ "_escaped_fragment_") {
				set $prerender 1;
			}
			
			if ($http_user_agent ~ "Prerender") {
				set $prerender 0;
			}
		
			if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
				set $prerender 0;
			}

			#resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
			resolver 8.8.8.8;

			if ($prerender = 1) {

			#setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
				set $prerender "service.prerender.io";
				rewrite .* /$scheme://$host$request_uri? break;
				proxy_pass http://$prerender;
			}
			if ($prerender = 0) {
				rewrite .* /index.html break;
			}
		}



	}

	server {
		listen 80;
		server_name api.everipedia.org;
		rewrite ^ https://$http_host$request_uri? permanent;    # force redirect http to https
	}


	# Backend API server
	server {
		listen 80;
		server_name api.everipedia.org;
		rewrite ^ https://$http_host$request_uri? permanent;    # force redirect http to https
	}

	server {
		listen 443;
		server_name api.everipedia.org;
		
		ssl on;
		ssl_certificate /etc/letsencrypt/live/api.everipedia.org/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/api.everipedia.org/privkey.pem;

		location / {
			proxy_pass http://127.0.0.1:3001/;
		}
	}

	# Beta Frontend
        server {
                listen 80;
                server_name beta67.everipedia.org;
		rewrite ^ https://$http_host$request_uri? permanent;    # force redirect http to https
        }
	server {
		listen 443;
		server_name beta67.everipedia.org;
		
		ssl on;
		ssl_certificate /etc/letsencrypt/live/beta67.everipedia.org/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/beta67.everipedia.org/privkey.pem;

		# AMP - Re-write legacy URLs of form /wiki/{slug}/amp
		rewrite ^/wiki/((?!lang_).*)/amp/?$ https://beta67.everipedia.org/wiki/lang_en/$1/amp/ last;

		# AMP - Fetch AMP page from backend
		location ~ ^/wiki/(.*)/amp/?$ {
			add_header X-uri "$1";
			proxy_pass http://127.0.0.1:3001/v2/wiki/amp/$1;
		}



		location / {
			root /home/beekeeper/livebeta/;
			try_files $uri /index.html =404;
                }

		location /sitemaps/recent/(.*).xml$ {
			proxy_pass http://127.0.0.1:3001/v2/sitemap/recent/$1;
		}

		location /sitemaps {
			alias /home/beekeeper/ep2-backend/public/sitemaps;
                        try_files $uri =404;
		}



	}

}
